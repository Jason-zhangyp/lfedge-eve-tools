// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fapi_2eproto;
namespace eve_tools {
class EveTPMRequest;
class EveTPMRequestDefaultTypeInternal;
extern EveTPMRequestDefaultTypeInternal _EveTPMRequest_default_instance_;
class EveTPMResponse;
class EveTPMResponseDefaultTypeInternal;
extern EveTPMResponseDefaultTypeInternal _EveTPMResponse_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
}  // namespace eve_tools
PROTOBUF_NAMESPACE_OPEN
template<> ::eve_tools::EveTPMRequest* Arena::CreateMaybeMessage<::eve_tools::EveTPMRequest>(Arena*);
template<> ::eve_tools::EveTPMResponse* Arena::CreateMaybeMessage<::eve_tools::EveTPMResponse>(Arena*);
template<> ::eve_tools::File* Arena::CreateMaybeMessage<::eve_tools::File>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eve_tools {

// ===================================================================

class File :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eve_tools.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eve_tools.File";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes Content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:eve_tools.File)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class EveTPMRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eve_tools.EveTPMRequest) */ {
 public:
  EveTPMRequest();
  virtual ~EveTPMRequest();

  EveTPMRequest(const EveTPMRequest& from);
  EveTPMRequest(EveTPMRequest&& from) noexcept
    : EveTPMRequest() {
    *this = ::std::move(from);
  }

  inline EveTPMRequest& operator=(const EveTPMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EveTPMRequest& operator=(EveTPMRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EveTPMRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EveTPMRequest* internal_default_instance() {
    return reinterpret_cast<const EveTPMRequest*>(
               &_EveTPMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EveTPMRequest& a, EveTPMRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EveTPMRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EveTPMRequest* New() const final {
    return CreateMaybeMessage<EveTPMRequest>(nullptr);
  }

  EveTPMRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EveTPMRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EveTPMRequest& from);
  void MergeFrom(const EveTPMRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EveTPMRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eve_tools.EveTPMRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpectedFilesFieldNumber = 2,
    kInputFilesFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // repeated string ExpectedFiles = 2;
  int expectedfiles_size() const;
  void clear_expectedfiles();
  const std::string& expectedfiles(int index) const;
  std::string* mutable_expectedfiles(int index);
  void set_expectedfiles(int index, const std::string& value);
  void set_expectedfiles(int index, std::string&& value);
  void set_expectedfiles(int index, const char* value);
  void set_expectedfiles(int index, const char* value, size_t size);
  std::string* add_expectedfiles();
  void add_expectedfiles(const std::string& value);
  void add_expectedfiles(std::string&& value);
  void add_expectedfiles(const char* value);
  void add_expectedfiles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& expectedfiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_expectedfiles();

  // repeated .eve_tools.File InputFiles = 3;
  int inputfiles_size() const;
  void clear_inputfiles();
  ::eve_tools::File* mutable_inputfiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >*
      mutable_inputfiles();
  const ::eve_tools::File& inputfiles(int index) const;
  ::eve_tools::File* add_inputfiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >&
      inputfiles() const;

  // string Command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);

  // @@protoc_insertion_point(class_scope:eve_tools.EveTPMRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> expectedfiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File > inputfiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class EveTPMResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eve_tools.EveTPMResponse) */ {
 public:
  EveTPMResponse();
  virtual ~EveTPMResponse();

  EveTPMResponse(const EveTPMResponse& from);
  EveTPMResponse(EveTPMResponse&& from) noexcept
    : EveTPMResponse() {
    *this = ::std::move(from);
  }

  inline EveTPMResponse& operator=(const EveTPMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EveTPMResponse& operator=(EveTPMResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EveTPMResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EveTPMResponse* internal_default_instance() {
    return reinterpret_cast<const EveTPMResponse*>(
               &_EveTPMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EveTPMResponse& a, EveTPMResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EveTPMResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EveTPMResponse* New() const final {
    return CreateMaybeMessage<EveTPMResponse>(nullptr);
  }

  EveTPMResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EveTPMResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EveTPMResponse& from);
  void MergeFrom(const EveTPMResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EveTPMResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eve_tools.EveTPMResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFilesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // repeated .eve_tools.File OutputFiles = 2;
  int outputfiles_size() const;
  void clear_outputfiles();
  ::eve_tools::File* mutable_outputfiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >*
      mutable_outputfiles();
  const ::eve_tools::File& outputfiles(int index) const;
  ::eve_tools::File* add_outputfiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >&
      outputfiles() const;

  // bytes Response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);

  // @@protoc_insertion_point(class_scope:eve_tools.EveTPMResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File > outputfiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// string Name = 1;
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:eve_tools.File.Name)
  return name_.GetNoArena();
}
inline void File::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.File.Name)
}
inline void File::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_tools.File.Name)
}
inline void File::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.File.Name)
}
inline void File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.File.Name)
}
inline std::string* File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.File.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:eve_tools.File.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.File.Name)
}

// bytes Content = 2;
inline void File::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& File::content() const {
  // @@protoc_insertion_point(field_get:eve_tools.File.Content)
  return content_.GetNoArena();
}
inline void File::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.File.Content)
}
inline void File::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_tools.File.Content)
}
inline void File::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.File.Content)
}
inline void File::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.File.Content)
}
inline std::string* File::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.File.Content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* File::release_content() {
  // @@protoc_insertion_point(field_release:eve_tools.File.Content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.File.Content)
}

// -------------------------------------------------------------------

// EveTPMRequest

// string Command = 1;
inline void EveTPMRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EveTPMRequest::command() const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMRequest.Command)
  return command_.GetNoArena();
}
inline void EveTPMRequest::set_command(const std::string& value) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMRequest.Command)
}
inline void EveTPMRequest::set_command(std::string&& value) {
  
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_tools.EveTPMRequest.Command)
}
inline void EveTPMRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.EveTPMRequest.Command)
}
inline void EveTPMRequest::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.EveTPMRequest.Command)
}
inline std::string* EveTPMRequest::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMRequest.Command)
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EveTPMRequest::release_command() {
  // @@protoc_insertion_point(field_release:eve_tools.EveTPMRequest.Command)
  
  return command_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EveTPMRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.EveTPMRequest.Command)
}

// repeated string ExpectedFiles = 2;
inline int EveTPMRequest::expectedfiles_size() const {
  return expectedfiles_.size();
}
inline void EveTPMRequest::clear_expectedfiles() {
  expectedfiles_.Clear();
}
inline const std::string& EveTPMRequest::expectedfiles(int index) const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_.Get(index);
}
inline std::string* EveTPMRequest::mutable_expectedfiles(int index) {
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_.Mutable(index);
}
inline void EveTPMRequest::set_expectedfiles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMRequest.ExpectedFiles)
  expectedfiles_.Mutable(index)->assign(value);
}
inline void EveTPMRequest::set_expectedfiles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMRequest.ExpectedFiles)
  expectedfiles_.Mutable(index)->assign(std::move(value));
}
inline void EveTPMRequest::set_expectedfiles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expectedfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::set_expectedfiles(int index, const char* value, size_t size) {
  expectedfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline std::string* EveTPMRequest::add_expectedfiles() {
  // @@protoc_insertion_point(field_add_mutable:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_.Add();
}
inline void EveTPMRequest::add_expectedfiles(const std::string& value) {
  expectedfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::add_expectedfiles(std::string&& value) {
  expectedfiles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::add_expectedfiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expectedfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::add_expectedfiles(const char* value, size_t size) {
  expectedfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EveTPMRequest::expectedfiles() const {
  // @@protoc_insertion_point(field_list:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EveTPMRequest::mutable_expectedfiles() {
  // @@protoc_insertion_point(field_mutable_list:eve_tools.EveTPMRequest.ExpectedFiles)
  return &expectedfiles_;
}

// repeated .eve_tools.File InputFiles = 3;
inline int EveTPMRequest::inputfiles_size() const {
  return inputfiles_.size();
}
inline void EveTPMRequest::clear_inputfiles() {
  inputfiles_.Clear();
}
inline ::eve_tools::File* EveTPMRequest::mutable_inputfiles(int index) {
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >*
EveTPMRequest::mutable_inputfiles() {
  // @@protoc_insertion_point(field_mutable_list:eve_tools.EveTPMRequest.InputFiles)
  return &inputfiles_;
}
inline const ::eve_tools::File& EveTPMRequest::inputfiles(int index) const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_.Get(index);
}
inline ::eve_tools::File* EveTPMRequest::add_inputfiles() {
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >&
EveTPMRequest::inputfiles() const {
  // @@protoc_insertion_point(field_list:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_;
}

// -------------------------------------------------------------------

// EveTPMResponse

// bytes Response = 1;
inline void EveTPMResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EveTPMResponse::response() const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMResponse.Response)
  return response_.GetNoArena();
}
inline void EveTPMResponse::set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMResponse.Response)
}
inline void EveTPMResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_tools.EveTPMResponse.Response)
}
inline void EveTPMResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.EveTPMResponse.Response)
}
inline void EveTPMResponse::set_response(const void* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.EveTPMResponse.Response)
}
inline std::string* EveTPMResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMResponse.Response)
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EveTPMResponse::release_response() {
  // @@protoc_insertion_point(field_release:eve_tools.EveTPMResponse.Response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EveTPMResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.EveTPMResponse.Response)
}

// repeated .eve_tools.File OutputFiles = 2;
inline int EveTPMResponse::outputfiles_size() const {
  return outputfiles_.size();
}
inline void EveTPMResponse::clear_outputfiles() {
  outputfiles_.Clear();
}
inline ::eve_tools::File* EveTPMResponse::mutable_outputfiles(int index) {
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >*
EveTPMResponse::mutable_outputfiles() {
  // @@protoc_insertion_point(field_mutable_list:eve_tools.EveTPMResponse.OutputFiles)
  return &outputfiles_;
}
inline const ::eve_tools::File& EveTPMResponse::outputfiles(int index) const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_.Get(index);
}
inline ::eve_tools::File* EveTPMResponse::add_outputfiles() {
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eve_tools::File >&
EveTPMResponse::outputfiles() const {
  // @@protoc_insertion_point(field_list:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eve_tools

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fapi_2eproto
