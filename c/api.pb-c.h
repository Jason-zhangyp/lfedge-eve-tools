/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api.proto */

#ifndef PROTOBUF_C_api_2eproto__INCLUDED
#define PROTOBUF_C_api_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CreateKey CreateKey;
typedef struct _CreateKeyResp CreateKeyResp;
typedef struct _SignWithKey SignWithKey;
typedef struct _SignWithKeyResp SignWithKeyResp;
typedef struct _DeleteKey DeleteKey;
typedef struct _DeleteKeyResp DeleteKeyResp;
typedef struct _EveRequest EveRequest;
typedef struct _EveResponse EveResponse;


/* --- enums --- */


/* --- messages --- */

struct  _CreateKey
{
  ProtobufCMessage base;
  int32_t algorithm;
};
#define CREATE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_key__descriptor) \
    , 0 }


struct  _CreateKeyResp
{
  ProtobufCMessage base;
  int32_t status_code;
  int32_t key_handle;
  char *error;
};
#define CREATE_KEY_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_key_resp__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string }


struct  _SignWithKey
{
  ProtobufCMessage base;
  ProtobufCBinaryData message;
  int32_t key_handle;
};
#define SIGN_WITH_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sign_with_key__descriptor) \
    , {0,NULL}, 0 }


struct  _SignWithKeyResp
{
  ProtobufCMessage base;
  int32_t status_code;
  ProtobufCBinaryData signature;
  char *error;
};
#define SIGN_WITH_KEY_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sign_with_key_resp__descriptor) \
    , 0, {0,NULL}, (char *)protobuf_c_empty_string }


struct  _DeleteKey
{
  ProtobufCMessage base;
  int32_t key_handle;
};
#define DELETE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_key__descriptor) \
    , 0 }


struct  _DeleteKeyResp
{
  ProtobufCMessage base;
  int32_t status_code;
  char *error;
};
#define DELETE_KEY_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_key_resp__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _EveRequest
{
  ProtobufCMessage base;
  int32_t message_type;
  CreateKey *create_key;
  SignWithKey *sign_with_key;
  DeleteKey *delete_key;
};
#define EVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eve_request__descriptor) \
    , 0, NULL, NULL, NULL }


struct  _EveResponse
{
  ProtobufCMessage base;
  int32_t message_type;
  CreateKeyResp *create_key_resp;
  SignWithKeyResp *sign_with_key_resp;
  DeleteKeyResp *delete_key_resp;
};
#define EVE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eve_response__descriptor) \
    , 0, NULL, NULL, NULL }


/* CreateKey methods */
void   create_key__init
                     (CreateKey         *message);
size_t create_key__get_packed_size
                     (const CreateKey   *message);
size_t create_key__pack
                     (const CreateKey   *message,
                      uint8_t             *out);
size_t create_key__pack_to_buffer
                     (const CreateKey   *message,
                      ProtobufCBuffer     *buffer);
CreateKey *
       create_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_key__free_unpacked
                     (CreateKey *message,
                      ProtobufCAllocator *allocator);
/* CreateKeyResp methods */
void   create_key_resp__init
                     (CreateKeyResp         *message);
size_t create_key_resp__get_packed_size
                     (const CreateKeyResp   *message);
size_t create_key_resp__pack
                     (const CreateKeyResp   *message,
                      uint8_t             *out);
size_t create_key_resp__pack_to_buffer
                     (const CreateKeyResp   *message,
                      ProtobufCBuffer     *buffer);
CreateKeyResp *
       create_key_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_key_resp__free_unpacked
                     (CreateKeyResp *message,
                      ProtobufCAllocator *allocator);
/* SignWithKey methods */
void   sign_with_key__init
                     (SignWithKey         *message);
size_t sign_with_key__get_packed_size
                     (const SignWithKey   *message);
size_t sign_with_key__pack
                     (const SignWithKey   *message,
                      uint8_t             *out);
size_t sign_with_key__pack_to_buffer
                     (const SignWithKey   *message,
                      ProtobufCBuffer     *buffer);
SignWithKey *
       sign_with_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sign_with_key__free_unpacked
                     (SignWithKey *message,
                      ProtobufCAllocator *allocator);
/* SignWithKeyResp methods */
void   sign_with_key_resp__init
                     (SignWithKeyResp         *message);
size_t sign_with_key_resp__get_packed_size
                     (const SignWithKeyResp   *message);
size_t sign_with_key_resp__pack
                     (const SignWithKeyResp   *message,
                      uint8_t             *out);
size_t sign_with_key_resp__pack_to_buffer
                     (const SignWithKeyResp   *message,
                      ProtobufCBuffer     *buffer);
SignWithKeyResp *
       sign_with_key_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sign_with_key_resp__free_unpacked
                     (SignWithKeyResp *message,
                      ProtobufCAllocator *allocator);
/* DeleteKey methods */
void   delete_key__init
                     (DeleteKey         *message);
size_t delete_key__get_packed_size
                     (const DeleteKey   *message);
size_t delete_key__pack
                     (const DeleteKey   *message,
                      uint8_t             *out);
size_t delete_key__pack_to_buffer
                     (const DeleteKey   *message,
                      ProtobufCBuffer     *buffer);
DeleteKey *
       delete_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_key__free_unpacked
                     (DeleteKey *message,
                      ProtobufCAllocator *allocator);
/* DeleteKeyResp methods */
void   delete_key_resp__init
                     (DeleteKeyResp         *message);
size_t delete_key_resp__get_packed_size
                     (const DeleteKeyResp   *message);
size_t delete_key_resp__pack
                     (const DeleteKeyResp   *message,
                      uint8_t             *out);
size_t delete_key_resp__pack_to_buffer
                     (const DeleteKeyResp   *message,
                      ProtobufCBuffer     *buffer);
DeleteKeyResp *
       delete_key_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_key_resp__free_unpacked
                     (DeleteKeyResp *message,
                      ProtobufCAllocator *allocator);
/* EveRequest methods */
void   eve_request__init
                     (EveRequest         *message);
size_t eve_request__get_packed_size
                     (const EveRequest   *message);
size_t eve_request__pack
                     (const EveRequest   *message,
                      uint8_t             *out);
size_t eve_request__pack_to_buffer
                     (const EveRequest   *message,
                      ProtobufCBuffer     *buffer);
EveRequest *
       eve_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eve_request__free_unpacked
                     (EveRequest *message,
                      ProtobufCAllocator *allocator);
/* EveResponse methods */
void   eve_response__init
                     (EveResponse         *message);
size_t eve_response__get_packed_size
                     (const EveResponse   *message);
size_t eve_response__pack
                     (const EveResponse   *message,
                      uint8_t             *out);
size_t eve_response__pack_to_buffer
                     (const EveResponse   *message,
                      ProtobufCBuffer     *buffer);
EveResponse *
       eve_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eve_response__free_unpacked
                     (EveResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CreateKey_Closure)
                 (const CreateKey *message,
                  void *closure_data);
typedef void (*CreateKeyResp_Closure)
                 (const CreateKeyResp *message,
                  void *closure_data);
typedef void (*SignWithKey_Closure)
                 (const SignWithKey *message,
                  void *closure_data);
typedef void (*SignWithKeyResp_Closure)
                 (const SignWithKeyResp *message,
                  void *closure_data);
typedef void (*DeleteKey_Closure)
                 (const DeleteKey *message,
                  void *closure_data);
typedef void (*DeleteKeyResp_Closure)
                 (const DeleteKeyResp *message,
                  void *closure_data);
typedef void (*EveRequest_Closure)
                 (const EveRequest *message,
                  void *closure_data);
typedef void (*EveResponse_Closure)
                 (const EveResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor create_key__descriptor;
extern const ProtobufCMessageDescriptor create_key_resp__descriptor;
extern const ProtobufCMessageDescriptor sign_with_key__descriptor;
extern const ProtobufCMessageDescriptor sign_with_key_resp__descriptor;
extern const ProtobufCMessageDescriptor delete_key__descriptor;
extern const ProtobufCMessageDescriptor delete_key_resp__descriptor;
extern const ProtobufCMessageDescriptor eve_request__descriptor;
extern const ProtobufCMessageDescriptor eve_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2eproto__INCLUDED */
